<?php
/**
 * 1.判断某一个值是否在数组中，替换，in_array() 这个在大数组时，效率不高；
 * @param type $item 检测的值
 * @param type $array 已存在数组
 * @return boolean
 */
function inArray($item,$array) {
	//array_flip 交换数组中的键和值
	$flipArray = array_flip($array);
	//如果 $flipArray[$item] 存在并且值不是 NULL 则返回 TRUE，否则返回 FALSE。
	return isset($flipArray[$item]);
}

/**
 * 2.检测图片验证码
 * @param string $code 图片验证码
 * @param number $id
 * @return boolean
 */
function check_verify($code,$id=1){
	$verify = new \Think\Verify();
	$verify->reset = false;//验证成功后不清空session
	return $verify->check($code,$id);
}

/**
 * 6.验证是否是合法的手机号码
 * @param string $phone 手机号码
 * @return boolean
 */
function isPhone($phone) {
	return preg_match("/^(0|86|17951)?(13[0-9]|15[012356789]|18[0-9]|14[57])[0-9]{8}$/", $phone) ? true :false;
}

/**
 * 7.生成唯一标识符
 * @return string 40个长度的字符串
 */
function getUniqid () {
	return sha1(uniqid(rand(),true));
}

/**
 * 8.数字后缀补.00
 * @param string $number 数字字符串
 * @return string
 */
function setZero($number){
	$pos = strpos($number, '.');
	if($pos !== false){
		$str = mb_substr($number, $pos);
		$len = strlen($str);
		if($len>3) $number = mb_substr($number, 0, $pos+3);
		else if($len == 2) $number .= '0';
	}else{
		$number .= '.00';
	}
	return $number;
} 

/**
 * 9.发送邮件函数
 * @param string $to 接收邮件的邮箱
 * @param string $subject 邮件主题
 * @param string $content 邮件的内容
 * @return boolean
 */
function sendMail($to, $subject, $content) {
	Vendor('PHPMailer.PHPMailerAutoload');
	$mailConfig = C('MAIL_CONFIG');
	$mail = new PHPMailer();									//实例化
	$mail->IsSMTP();											// 启用SMTP
	$mail->Host			= $mailConfig['mailhost']; 				//SMTP 服务器,"smtp.qq.com  ...465"
	$mail->Port     	= 465;                   				// SMTP服务器的端口号
	//$mail->SMTPDebug  = 1;                     				// 启用SMTP调试功能
	$mail->SMTPAuth 	= true; 								//启用smtp认证
	$mail->SMTPSecure 	= "ssl";                 				// 安全协议
	$mail->Username 	= $mailConfig['mailusername'];			//你的邮箱名
	$mail->Password 	= $mailConfig['mailpassword'];			//邮箱密码
	$mail->From 		= $mailConfig['mailfrom'];				//发件人地址（也就是你的邮箱地址）
	$mail->FromName 	= $mailConfig['mailfromname'];			//发件人姓名
	$mail->AddAddress($to,"name");
	$mail->WordWrap 	= 50;									//设置每行字符长度
	$mail->IsHTML($mailConfig['mailisHtml']);					// 是否HTML格式邮件
	$mail->CharSet		= "UTF-8";								//设置邮件编码
	$mail->Subject 		= $subject;								//邮件主题
	$mail->Body 		= $content;								//邮件内容
	$mail->AltBody = "This is the body in plain text for non-HTML mail clients"; //邮件正文不支持HTML的备用显示
	return $mail->Send() ? true : false;
}

/**
 * 10.数组转对象
 * @param object $e
 */
function arrayToObject($e){
    if(gettype($e)!='array') return;
    foreach($e as $k=>$v){
        if(gettype($v)=='array' || getType($v)=='object') $e[$k]=(object)arrayToObject($v);
    }
    return (object)$e;
}

/**
 * 11.对象转数组
 * @param object $e
 * @return void|array
 */
function objectToArray($e){
    $e=(array)$e;
    foreach($e as $k=>$v){
        if(gettype($v)=='resource') return;
        if(gettype($v)=='object' || gettype($v)=='array') $e[$k]=(array)objectToArray($v);
    }
    return $e;
}

/**
 * 12.删除用,分割的字符串中指定的单个元素
 * @param string $str 用,分隔的字符串集合
 * @param string $find 待删除的字符串
 * @return string 删除后的新字符串
 */
function strRemove($str,$find) {
    $arr = explode(',', $str);
    $key = array_search($find, $arr);
    if($key !== false) array_splice($arr, $key, 1);
    return implode(',', $arr);
}

/**
 * 13.判断字符串是否为数字
 * @param string $_string 字符串
 * @return boolean
 */
function isNumeric($_string){
    return is_numeric($_string) ? true : false;
}

/**
 * 14.http JSON数据请求的解析
 * @param string $requestJSON 待解析的json字符串
 * @param boolean $type 默认为false，true表示解析成数组，false表示解析成对象
 * @return mixed（array|object）
 */
function parseJSON($requestJSON,$type = false) {
    return $type ? json_decode($requestJSON,true) : json_decode($requestJSON);
}

/**
 * 15.返回JSON格式数据
 * @param array $requestArray 待转换的数组数据
 * @param string $type $type默认为true，将空数组转换成对象，即将数组转换成对象JSON；$type为false时将数组转换成数组JSON
 * @return string
 */
function toJSON($requestArray,$type = true) {
    header('Content-type: application/json');
    return $type ? json_encode($requestArray,JSON_FORCE_OBJECT) : json_encode($requestArray);
}

/**
 * 16.根据uid来生成订单号
 * @param unknown $uid 用户id
 * @return string 订单编号
 */
function getOrderNum($uid) {
    return $uid.date('His'.mt_rand(10,99));
}

/**
 * 17.时间戳转星期几，eg:1443996000是1,表示周一，7表示周天
 * @param string $time 日期时间戳
 * @return string
 */
function timeToWeekday($time) {
	$weekday = $time ? date('N', $time) : date('N', time());
	switch ($weekday){
		case 1:
			$week = '周一';
			break;
		case 2:
			$week = '周二';
			break;
		case 3:
			$week = '周三';
			break;
		case 4:
			$week = '周四';
			break;
		case 5:
			$week = '周五';
			break;
		case 6:
			$week = '周六';
			break;
		case 7:
			$week = '周日';
			break;
	}
	return $week;
}

/**
 * 18.判断日期时间戳是否是节假日,工作日对应结果为 0, 休息日对应结果为 1, 节假日对应的结果为 2；
 * @param string $time 日期时间戳或日期时间戳集合，集合是用,隔开的
 * @return void|mixed
 * 百度apistore地址：http://apistore.baidu.com/apiworks/servicedetail/1116.html
 */
function whetherHoliday($time) {
	if($time == '') return; 
	//时间戳转日期
	if(strpos($time, ',') !== false){//多个查询
		$timeArr = explode(',', $time);
		$timeStr = '';
		foreach ($timeArr as $key=>$value){
			$timeStr .= date('Ymd', $value).',';
		}
		$date = substr($timeStr, 0 , -1);
	}else{
		$date = date('Ymd', $time);
	}
	$ch = curl_init();
	$url = 'http://apis.baidu.com/xiaogg/holiday/holiday?d='.$date;
	$header = array(
		//'apikey: 您自己的apikey',
		'apikey:5ed6d2accf8e6f30142806f5874e1a14'
	);
	// 添加apikey到header
	curl_setopt($ch, CURLOPT_HTTPHEADER, $header);
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
	// 执行HTTP请求
	curl_setopt($ch , CURLOPT_URL , $url);
	$res = curl_exec($ch);
	return json_decode($res);
}

/**
 * 19.根据时间戳获取时间戳所在的本周和下周的日期时间戳集合
 * @param string $time 时间戳，为空时，表示当前的时间戳
 * @return multitype:multitype:string
 */
function getCurrentAndNextWeekdayAsTime($time = '') {
	$time = $time ? $time : strtotime(date('Y-m-d', time()));
	$weekday = date('N', $time);
	/**
	 * 算法分析：
	 * 1,7-1计算未来6天日期
	 * 2,7-2计算未来5天日期，2-1计算过去1天日期
	 * 3,7-3计算未来4天日期，3-1计算过去2天日期
	 * ...
	 */
	$nowWeekday = array();
	$afterWeekday = array();
	//计算本周
	for($i=1;$i<=7;$i++){
		if($i < $weekday) $nowWeekday[] = strtotime('-'.($weekday-$i).'day', $time);//计算过去的N天
		else if($i == $weekday) $nowWeekday[] = $time;//计算今天
		else if($i > $weekday) $nowWeekday[] = strtotime('+'.($i-$weekday).'day', $time);//计算未来的N天
	}
	$afterTimeStart = $nowWeekday[6];
	//计算未来一周的N天
	for($i=1;$i<=7;$i++){
		$afterWeekday[] = strtotime('+'.$i.'day', $afterTimeStart);
	}
	return array(
		'nowWeek'=>$nowWeekday,
		'afterWeek'=>$afterWeekday
	);
}

/**
 * 20.根据时间戳获取时间戳所在的本周的日期时间戳集合
 * @param string $time 时间戳，为空时，表示当前的时间戳
 * @return multitype:multitype:string
 */
function getCurrentWeekdayAsTime($time = '') {
	$time = $time ? $time : strtotime(date('Y-m-d', time()));
	$weekday = date('N', $time);
	/**
	 * 算法分析：
	 * 1,7-1计算未来6天日期
	 * 2,7-2计算未来5天日期，2-1计算过去1天日期
	 * 3,7-3计算未来4天日期，3-1计算过去2天日期
	 * ...
	*/
	$nowWeekday = array();
	//计算本周
	for($i=1;$i<=7;$i++){
		if($i < $weekday) $nowWeekday[] = strtotime('-'.($weekday-$i).'day', $time);//计算过去的N天
		else if($i == $weekday) $nowWeekday[] = $time;//计算今天
		else if($i > $weekday) $nowWeekday[] = strtotime('+'.($i-$weekday).'day', $time);//计算未来的N天
	}
	return array(
		'nowWeek'=>$nowWeekday
	);
}

/**
 * 21.根据时间戳获取时间戳的下周的日期时间戳集合
 * @param string $time 时间戳，为空时，表示当前的时间戳
 * @return multitype:multitype:string
 */
function getNextWeekdayAsTime($time = '') {
	$time = $time ? $time : strtotime(date('Y-m-d', time()));
	$weekday = date('N', $time);
	/**
	 * 算法分析：
	 * 1,7-1计算未来6天日期
	 * 2,7-2计算未来5天日期，2-1计算过去1天日期
	 * 3,7-3计算未来4天日期，3-1计算过去2天日期
	 * ...
	*/
	$nowWeekday = array();
	$afterWeekday = array();
	//计算本周
	for($i=1;$i<=7;$i++){
		if($i < $weekday) $nowWeekday[] = strtotime('-'.($weekday-$i).'day', $time);//计算过去的N天
		else if($i == $weekday) $nowWeekday[] = $time;//计算今天
		else if($i > $weekday) $nowWeekday[] = strtotime('+'.($i-$weekday).'day', $time);//计算未来的N天
	}
	$afterTimeStart = $nowWeekday[6];
	//计算未来一周的N天
	for($i=1;$i<=7;$i++){
		$afterWeekday[] = strtotime('+'.$i.'day', $afterTimeStart);
	}
	return array(
		'afterWeek'=>$afterWeekday
	);
}

/**
 * 20.将课时字符串转换成数组
 * @param string $period 类似于'07:00|09:00'的课时字符串
 * @return void|multitype:array
 */
function busyOrBookedPeriodToarray($period = '') {
	if($period == '') return;
	return explode('|', $period);
}

/**
 * 21.判断当前两个周的日期是否是节假日,工作日对应结果为 0, 休息日对应结果为 1, 节假日对应的结果为 2；
 * @param array $oneCoachPeriod 当前的两个周日期时间戳
 * @return array eg:Array ( [20151005] => 2 [20151006] => 2 [20151007] => 2 [20151008] => 0 [20151009] => 0 [20151010] => 0 [20151011] => 1 [20151012] => 0 [20151013] => 0 [20151014] => 0 [20151015] => 0 [20151016] => 0 [20151017] => 1 [20151018] => 1 )
 */
function theDayisHoliday($oneCoachPeriod = array()) {
	//1.将日期时间戳数组转换成时间戳字符串
	$searchCoachPeriod = '';//远程请求字符串
	foreach ($oneCoachPeriod as $key=>$value){
		foreach ($value as $k=>$v) {
			$searchCoachPeriod .= $v.',';
		}
	}
	$searchCoachPeriod = substr($searchCoachPeriod, 0, -1);
	//2.判断日期时间戳是否是节假日
	$daysHoliday = whetherHoliday($searchCoachPeriod);
	return objectToArray($daysHoliday);
}

//高精度计算（加，减）
function numberFormat($action,$number1,$number2) {
	$decimal = getFloatLength($number1) > getFloatLength($number2) ? getFloatLength($number1) : getFloatLength($number2);
	if(!$decimal){
		switch ($action){
			case '-':
				return $number1 - $number2;
				break;
			case '+':
				return $number1 + $number2;
				break;
		}
	}else{
		switch ($action){
			case '-':
				return bcsub($number1,$number2,$decimal);
				break;
			case '+':
				return bcadd($number1,$number2,$decimal);
				break;
		}
	}
}

//求小数点的位数
function getFloatLength($num){
	$count = 0;
	$temp = explode ('.',$num);
	if (sizeof($temp)>1) {
		$decimal = end ($temp);
		$count = strlen ($decimal);
	}
	return $count;
}